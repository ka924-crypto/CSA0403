#include <stdio.h>

// Structure to represent a process
struct Process {
    int pid;        // Process ID
    int burstTime;  // Burst Time
    int waitingTime;
    int turnAroundTime;
};

// Function to calculate waiting time
void calculateWaitingTime(struct Process p[], int n) {
    p[0].waitingTime = 0;  // First process has 0 waiting time

    for (int i = 1; i < n; i++) {
        p[i].waitingTime = p[i - 1].waitingTime + p[i - 1].burstTime;
    }
}

// Function to calculate turnaround time
void calculateTurnAroundTime(struct Process p[], int n) {
    for (int i = 0; i < n; i++) {
        p[i].turnAroundTime = p[i].waitingTime + p[i].burstTime;
    }
}

// Function to display the scheduling results
void displayResults(struct Process p[], int n) {
    int totalWT = 0, totalTAT = 0;

    printf("PID\tBurst Time\tWaiting Time\tTurnaround Time\n");

    for (int i = 0; i < n; i++) {
        totalWT += p[i].waitingTime;
        totalTAT += p[i].turnAroundTime;
        printf("%d\t%d\t\t%d\t\t%d\n", p[i].pid, p[i].burstTime, p[i].waitingTime, p[i].turnAroundTime);
    }

    printf("\nAverage Waiting Time = %.2f", (float)totalWT / n);
    printf("\nAverage Turnaround Time = %.2f\n", (float)totalTAT / n);
}

int main() {
    int n;

    printf("Enter number of processes: ");
    scanf("%d", &n);

    struct Process p[n];

    // Input burst times
    for (int i = 0; i < n; i++) {
        p[i].pid = i + 1;
        printf("Enter burst time for Process %d: ", p[i].pid);
        scanf("%d", &p[i].burstTime);
    }

    calculateWaitingTime(p, n);
    calculateTurnAroundTime(p, n);
    displayResults(p, n);

    return 0;
}
