#include <stdio.h>
#include <string.h>

#define MAX_USERS 10
#define MAX_FILES 20
#define NAME_LEN 30

struct UserDirectory {
    char user_name[NAME_LEN];
    char files[MAX_FILES][NAME_LEN];
    int file_count;
};

struct FileSystem {
    struct UserDirectory users[MAX_USERS];
    int user_count;
};

void create_user(struct FileSystem *fs, const char *username) {
    if (fs->user_count >= MAX_USERS) {
        printf("Cannot add more users.\n");
        return;
    }
    for (int i = 0; i < fs->user_count; i++) {
        if (strcmp(fs->users[i].user_name, username) == 0) {
            printf("User already exists.\n");
            return;
        }
    }
    strcpy(fs->users[fs->user_count].user_name, username);
    fs->users[fs->user_count].file_count = 0;
    fs->user_count++;
    printf("User '%s' directory created.\n", username);
}

int find_user_index(struct FileSystem *fs, const char *username) {
    for (int i = 0; i < fs->user_count; i++) {
        if (strcmp(fs->users[i].user_name, username) == 0) {
            return i;
        }
    }
    return -1;
}

void create_file(struct FileSystem *fs, const char *username, const char *filename) {
    int user_idx = find_user_index(fs, username);
    if (user_idx == -1) {
        printf("User '%s' not found.\n", username);
        return;
    }
    struct UserDirectory *user = &fs->users[user_idx];
    if (user->file_count >= MAX_FILES) {
        printf("File limit reached for user '%s'.\n", username);
        return;
    }
    for (int i = 0; i < user->file_count; i++) {
        if (strcmp(user->files[i], filename) == 0) {
            printf("File already exists.\n");
            return;
        }
    }
    strcpy(user->files[user->file_count], filename);
    user->file_count++;
    printf("File '%s' created for user '%s'.\n", filename, username);
}

void delete_file(struct FileSystem *fs, const char *username, const char *filename) {
    int user_idx = find_user_index(fs, username);
    if (user_idx == -1) {
        printf("User '%s' not found.\n", username);
        return;
    }
    struct UserDirectory *user = &fs->users[user_idx];
    for (int i = 0; i < user->file_count; i++) {
        if (strcmp(user->files[i], filename) == 0) {
            for (int j = i; j < user->file_count - 1; j++) {
                strcpy(user->files[j], user->files[j + 1]);
            }
            user->file_count--;
            printf("File '%s' deleted for user '%s'.\n", filename, username);
            return;
        }
    }
    printf("File '%s' not found for user '%s'.\n", filename, username);
}

void search_file(struct FileSystem *fs, const char *username, const char *filename) {
    int user_idx = find_user_index(fs, username);
    if (user_idx == -1) {
        printf("User '%s' not found.\n", username);
        return;
    }
    struct UserDirectory *user = &fs->users[user_idx];
    for (int i = 0; i < user->file_count; i++) {
        if (strcmp(user->files[i], filename) == 0) {
            printf("File '%s' found in user '%s' directory.\n", filename, username);
            return;
        }
    }
    printf("File '%s' not found in user '%s' directory.\n", filename, username);
}

void display_user_files(struct FileSystem *fs, const char *username) {
    int user_idx = find_user_index(fs, username);
    if (user_idx == -1) {
        printf("User '%s' not found.\n", username);
        return;
    }
    struct UserDirectory *user = &fs->users[user_idx];
    printf("Files for user '%s':\n", username);
    if (user->file_count == 0) {
        printf("  No files.\n");
    } else {
        for (int i = 0; i < user->file_count; i++) {
            printf("  - %s\n", user->files[i]);
        }
    }
}

void display_all_users(struct FileSystem *fs) {
    if (fs->user_count == 0) {
        printf("No users in the system.\n");
        return;
    }
    printf("All users and their files:\n");
    for (int i = 0; i < fs->user_count; i++) {
        display_user_files(fs, fs->users[i].user_name);
    }
}

int main() {
    struct FileSystem fs;
    fs.user_count = 0;

    int choice;
    char username[NAME_LEN], filename[NAME_LEN];

    while (1) {
        printf("\n--- Two-Level Directory System ---\n");
        printf("1. Create User Directory\n");
        printf("2. Create File\n");
        printf("3. Delete File\n");
        printf("4. Search File\n");
        printf("5. Display User Files\n");
        printf("6. Display All Users and Files\n");
        printf("7. Exit\n");
        printf("Enter choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter username: ");
                scanf("%s", username);
                create_user(&fs, username);
                break;
            case 2:
                printf("Enter username: ");
                scanf("%s", username);
                printf("Enter filename to create: ");
                scanf("%s", filename);
                create_file(&fs, username, filename);
                break;
            case 3:
                printf("Enter username: ");
                scanf("%s", username);
                printf("Enter filename to delete: ");
                scanf("%s", filename);
                delete_file(&fs, username, filename);
                break;
            case 4:
                printf("Enter username: ");
                scanf("%s", username);
                printf("Enter filename to search: ");
                scanf("%s", filename);
                search_file(&fs, username, filename);
                break;
            case 5:
                printf("Enter username: ");
                scanf("%s", username);
                display_user_files(&fs, username);
                break;
            case 6:
                display_all_users(&fs);
                break;
            case 7:
                printf("Exiting...\n");
                return 0;
            default:
                printf("Invalid choice.\n");
        }
    }

    return 0;
}
